{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cegeka\\\\Proiect\\\\ProgramInternshipModal\\\\src\\\\components\\\\Program\\\\ProgramForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Modal, Form, Button, Icon, Message } from \"semantic-ui-react\";\n//import DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProgramForm = props => {\n  _s();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const emptyProgram = {\n    id: \"\",\n    title: \"\",\n    technologysIds: [],\n    startDate: \"\",\n    endDate: \"\",\n    description: \"\"\n  };\n  const [program, setProgram] = useState(emptyProgram);\n  const {\n    technologys\n  } = props;\n  const options = technologys.map(technology => {\n    return {\n      text: technology.name,\n      value: technology.id\n    };\n  });\n\n  const handleInputChange = (name, value) => {\n    const updatedProgram = { ...program,\n      [name]: value\n    };\n    setProgram(updatedProgram);\n  };\n\n  const isFormValid = () => {\n    if (!program) return false;else if (!program.title) return false;else if (!program.technologysIds || program.technologysIds.length === 0) return false;else if (!program.startDate) return false;else if (!program.endDate) return false;else if (!program.description) return false;\n    return true;\n  };\n\n  const handleSubmit = event => {\n    if (!isFormValid()) {\n      setIsError(true);\n      return;\n    }\n\n    setIsError(false);\n    const {\n      editProgram,\n      createProgram,\n      index\n    } = props;\n\n    if (isNewForm()) {\n      createProgram(program);\n    } else {\n      editProgram(index, program);\n    }\n\n    closeForm();\n  };\n\n  const showForm = () => {\n    const {\n      programProp\n    } = props;\n    setIsModalOpen(true);\n    setProgram(programProp || emptyProgram);\n  };\n\n  const closeForm = () => setIsModalOpen(false);\n\n  const isNewForm = () => props.formType === \"New\";\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    trigger: /*#__PURE__*/_jsxDEV(Button, {\n      icon: true,\n      onClick: showForm,\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        name: isNewForm() ? \"plus\" : \"edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this),\n    closeIcon: true,\n    open: isModalOpen,\n    onClose: closeForm,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      children: isNewForm() ? \"Add Photo\" : `Edit: ${program.title}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        error: isError,\n        children: [/*#__PURE__*/_jsxDEV(Message, {\n          error: true,\n          content: \"Fill out all fields and try again...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"title\",\n          label: \"Title\",\n          placeholder: \"Program title\",\n          defaultValue: isNewForm() ? \"\" : program.title,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Dropdown, {\n          name: \"technologysIds\",\n          label: \"Technology\",\n          placeholder: \"Program technology\",\n          defaultValue: isNewForm() ? \"\" : program.technologysIds,\n          onChange: (e, data) => handleInputChange(data.name, data.value),\n          required: true,\n          fluid: true,\n          multiple: true,\n          selection: true,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"startDate\",\n          label: \"Start Date\",\n          placeholder: \"Program start date\",\n          defaultValue: isNewForm() ? \"\" : program.startDate,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"endDate\",\n          label: \"End Date\",\n          placeholder: \"Program end date\",\n          defaultValue: isNewForm() ? \"\" : program.endDate,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n          name: \"description\",\n          label: \"Description\",\n          placeholder: \"Tell more about the program...\",\n          defaultValue: isNewForm() ? \"\" : program.description,\n          onChange: e => handleInputChange(e.target.name, e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        positive: true,\n        icon: \"save\",\n        content: \"Save\",\n        onClick: e => {\n          handleSubmit(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProgramForm, \"B0PpR98zlLGgU6JgHDfOhKUWh1Q=\");\n\n_c = ProgramForm;\nexport default ProgramForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgramForm\");","map":{"version":3,"sources":["E:/Cegeka/Proiect/ProgramInternshipModal/src/components/Program/ProgramForm.tsx"],"names":["React","useState","Modal","Form","Button","Icon","Message","ProgramForm","props","isModalOpen","setIsModalOpen","isError","setIsError","emptyProgram","id","title","technologysIds","startDate","endDate","description","program","setProgram","technologys","options","map","technology","text","name","value","handleInputChange","updatedProgram","isFormValid","length","handleSubmit","event","editProgram","createProgram","index","isNewForm","closeForm","showForm","programProp","formType","e","target","data"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ProgramModel } from \"../../models/ProgramModel\";\r\nimport { Modal, Form, Button, Icon, Message } from \"semantic-ui-react\";\r\nimport { TechnologyModel } from \"../../models/TechnologyModel\";\r\n//import DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\ninterface ProgramFormProps {\r\n  formType: \"New\" | \"Edit\";\r\n  index: string;\r\n  programProp?: ProgramModel;\r\n  technologys: TechnologyModel[];\r\n  editProgram: Function;\r\n  createProgram: Function;\r\n}\r\n\r\nconst ProgramForm = (props: ProgramFormProps) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const emptyProgram: ProgramModel = {\r\n    id: \"\",\r\n    title: \"\",\r\n    technologysIds: [],\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const [program, setProgram] = useState<ProgramModel>(emptyProgram);\r\n\r\n  const { technologys } = props;\r\n\r\n  const options = technologys.map((technology) => {\r\n    return {\r\n      text: technology.name,\r\n      value: technology.id,\r\n    };\r\n  });\r\n\r\n  const handleInputChange = (name: string, value: string | string[] | any) => {\r\n    const updatedProgram = {\r\n      ...program,\r\n      [name]: value,\r\n    };\r\n    setProgram(updatedProgram);\r\n  };\r\n\r\n  const isFormValid = () => {\r\n    if (!program) return false;\r\n    else if (!program.title) return false;\r\n    else if (!program.technologysIds || program.technologysIds.length === 0)\r\n      return false;\r\n    else if (!program.startDate) return false;\r\n    else if (!program.endDate) return false;\r\n    else if (!program.description) return false;\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = (event: any) => {\r\n    if (!isFormValid()) {\r\n      setIsError(true);\r\n      return;\r\n    }\r\n    setIsError(false);\r\n\r\n    const { editProgram, createProgram, index } = props;\r\n\r\n    if (isNewForm()) {\r\n      createProgram(program);\r\n    } else {\r\n      editProgram(index, program);\r\n    }\r\n    closeForm();\r\n  };\r\n\r\n  const showForm = () => {\r\n    const { programProp } = props;\r\n    setIsModalOpen(true);\r\n    setProgram(programProp || emptyProgram);\r\n  };\r\n\r\n  const closeForm = () => setIsModalOpen(false);\r\n  const isNewForm = () => props.formType === \"New\";\r\n  return (\r\n    <Modal\r\n      trigger={\r\n        <Button icon onClick={showForm}>\r\n          <Icon name={isNewForm() ? \"plus\" : \"edit\"} />\r\n        </Button>\r\n      }\r\n      closeIcon\r\n      open={isModalOpen}\r\n      onClose={closeForm}\r\n    >\r\n      <Modal.Header>\r\n        {isNewForm() ? \"Add Photo\" : `Edit: ${program.title}`}\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Form error={isError}>\r\n          <Message error content=\"Fill out all fields and try again...\" />\r\n          <Form.Input\r\n            name=\"title\"\r\n            label=\"Title\"\r\n            placeholder=\"Program title\"\r\n            defaultValue={isNewForm() ? \"\" : program.title}\r\n            onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n            required\r\n          />\r\n          <Form.Dropdown\r\n            name=\"technologysIds\"\r\n            label=\"Technology\"\r\n            placeholder=\"Program technology\"\r\n            defaultValue={isNewForm() ? \"\" : program.technologysIds}\r\n            onChange={(e, data) => handleInputChange(data.name, data.value)}\r\n            required\r\n            fluid\r\n            multiple\r\n            selection\r\n            options={options}\r\n          />\r\n          <Form.Input\r\n            name=\"startDate\"\r\n            label=\"Start Date\"\r\n            placeholder=\"Program start date\"\r\n            defaultValue={isNewForm() ? \"\" : program.startDate}\r\n            onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n            required\r\n          />\r\n          <Form.Input\r\n            name=\"endDate\"\r\n            label=\"End Date\"\r\n            placeholder=\"Program end date\"\r\n            defaultValue={isNewForm() ? \"\" : program.endDate}\r\n            onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n            required\r\n          />\r\n          <Form.TextArea\r\n            name=\"description\"\r\n            label=\"Description\"\r\n            placeholder=\"Tell more about the program...\"\r\n            defaultValue={isNewForm() ? \"\" : program.description}\r\n            onChange={(e) => handleInputChange(e.target.name, e.target.value)}\r\n            required\r\n          />\r\n        </Form>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button\r\n          positive\r\n          icon=\"save\"\r\n          content=\"Save\"\r\n          onClick={(e) => {\r\n            handleSubmit(e);\r\n          }}\r\n        />\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ProgramForm;\r\n"]},"metadata":{},"sourceType":"module"}